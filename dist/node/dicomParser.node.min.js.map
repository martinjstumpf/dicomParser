{"version":3,"sources":["webpack://dicomParser/webpack/universalModuleDefinition","webpack://dicomParser/webpack/bootstrap","webpack://dicomParser/./readTag.js","webpack://dicomParser/./dataSet.js","webpack://dicomParser/./sharedCopy.js","webpack://dicomParser/./byteStream.js","webpack://dicomParser/./readSequenceItem.js","webpack://dicomParser/./byteArrayParser.js","webpack://dicomParser/./readDicomElementExplicit.js","webpack://dicomParser/./parseDicomDataSet.js","webpack://dicomParser/./readEncapsulatedPixelDataFromFragments.js","webpack://dicomParser/./littleEndianByteArrayParser.js","webpack://dicomParser/./alloc.js","webpack://dicomParser/./readDicomElementImplicit.js","webpack://dicomParser/./findItemDelimitationItem.js","webpack://dicomParser/./util/util.js","webpack://dicomParser/./readEncapsulatedImageFrame.js","webpack://dicomParser/./readPart10Header.js","webpack://dicomParser/./bigEndianByteArrayParser.js","webpack://dicomParser/./readSequenceElementImplicit.js","webpack://dicomParser/./readSequenceElementExplicit.js","webpack://dicomParser/./findAndSetUNElementLength.js","webpack://dicomParser/./findEndOfEncapsulatedPixelData.js","webpack://dicomParser/./util/elementToString.js","webpack://dicomParser/./readEncapsulatedPixelData.js","webpack://dicomParser/external \"zlib\"","webpack://dicomParser/../node_modules/webpack/buildin/module.js","webpack://dicomParser/./parseDicom.js","webpack://dicomParser/./version.js","webpack://dicomParser/./util/createJPEGBasicOffsetTable.js","webpack://dicomParser/./util/dataSetToJS.js","webpack://dicomParser/./util/parseDA.js","webpack://dicomParser/./util/parseTM.js","webpack://dicomParser/./util/index.js","webpack://dicomParser/./index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","byteStream","undefined","groupNumber","readUint16","elementNumber","tag","toString","substr","_byteArrayParser","getByteArrayParser","element","defaultParser","parser","DataSet","byteArrayParser","byteArray","elements","_classCallCheck","this","index","length","dataOffset","readInt16","readUint32","readInt32","readFloat","readDouble","numMatching","readFixedString","match","fixedString","split","trim","replace","string","parseFloat","parseInt","bytes","offset","byteOffset","Buffer","slice","Uint8Array","buffer","_sharedCopy","ByteStream","position","warnings","numBytes","byteArrayView","_sharedCopy2","default","result","_readTag2","_readTag","byte","String","fromCharCode","untilTag","vr","getDataLengthSizeInBytesForVR","seek","hadUndefinedLength","_readSequenceElementExplicit2","_findEndOfEncapsulatedPixelData2","_findAndSetUNElementLength2","_findItemDelimitationItem2","parseDicomDataSetExplicit","dataSet","maxPosition","options","arguments","_readDicomElementExplicit2","parseDicomDataSetImplicit","_readDicomElementImplicit2","vrCallback","pixelDataElement","startFragmentIndex","numFragments","fragments","encapsulatedPixelData","basicOffsetTable","_byteStream2","_readSequenceItem2","fragmentZeroPosition","bufferSize","calculateBufferSize","pixelData","_alloc2","pixelDataIndex","fragmentOffset","j","startFragment","int16","byteArrayForParsingFloat","Float32Array","Float64Array","alloc","isSequence","_readSequenceElementImplicit2","nextTag","push","itemDelimiterLength","stringVrs","AE","AS","AT","CS","DA","DS","DT","FL","FD","IS","LO","LT","OB","OD","OF","OW","PN","SH","SL","SQ","SS","ST","TM","UI","UL","UN","UR","US","UT","isStringVr","isPrivateTag","parsePN","personName","stringValues","familyName","givenName","middleName","prefix","suffix","frameIndex","findFragmentIndexWithOffset","calculateNumberOfFragmentsForFrame","_readEncapsulatedPixelDataFromFragments2","_readEncapsulatedPixelDataFromFragments","nextFrameOffset","littleEndianByteStream","_littleEndianByteArrayParser2","readPrefix","metaHeaderDataSet","_dataSet2","readTheHeader","items","item","readSequenceItemImplicit","readSQElementUndefinedLengthImplicit","readSQElementKnownLengthImplicit","parseDicomDataSet","readDicomDataSetImplicitUndefinedLength","readSequenceItemExplicit","readSQElementUndefinedLengthExplicit","readSQElementKnownLengthExplicit","readDicomDataSetExplicitUndefinedLength","baseOffset","textResult","multiElementToString","numItems","func","util","num","uint32","toUpperCase","uint16","int32","double","float","frame","deprecatedNoticeLogged","console","log","_readEncapsulatedImageFrame2","require","webpackPolyfill","deprecate","paths","children","readDataSet","transferSyntax","x00020010","transferSyntaxElement","readTransferSyntax","explicit","isExplicit","dataSetByteStream","inflater","fullByteArrayCallback","zlib","deflatedBuffer","inflatedBuffer","inflateRawSync","fullByteArrayBuffer","copy","pako","deflated","inflated","inflateRaw","fullByteArray","set","_bigEndianByteArrayParser2","getDataSetByteStream","e","ex","exception","_readPart10Header2","instanceDataSet","propertyName","concat","mergeDataSets","isEndOfImageMarker","isFragmentEndOfImage","fragmentIndex","fragment","findLastImageFrameFragmentIndex","endFragmentIndex","explicitDataSetToJS","omitPrivateAttibutes","maxElementLength","sequenceItems","asString","_elementToString2","_elementToString","date","validate","yyyy","substring","mm","dd","y","isNaN","daysInMonth","isValidDate","year","month","day","time","hh","ss","ffffff","hours","minutes","seconds","fractionalSeconds","keys","_util","forEach","key","_index","_parseDicomDataSet"],"mappings":"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","file":"dicomParser.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dicom-parser\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dicom-parser\"] = factory();\n\telse\n\t\troot[\"dicomParser\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads a tag (group number and element number) from a byteStream\n * @param byteStream the byte stream to read from\n * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n * and eeee is the lower case hex value of the element number\n */\nexport default function readTag (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readTag: missing required parameter \\'byteStream\\'';\n  }\n\n  const groupNumber = byteStream.readUint16() * 256 * 256;\n  const elementNumber = byteStream.readUint16();\n  const tag = `x${(`00000000${(groupNumber + elementNumber).toString(16)}`).substr(-8)}`;\n\n  return tag;\n}\n","import { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\n\nfunction getByteArrayParser (element, defaultParser) {\n  return (element.parser !== undefined ? element.parser : defaultParser);\n}\n\n/**\n * Constructs a new DataSet given byteArray and collection of elements\n * @param byteArrayParser\n * @param byteArray\n * @param elements\n * @constructor\n */\nexport default class DataSet {\n  constructor (byteArrayParser, byteArray, elements) {\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.elements = elements;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  uint16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  int16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  uint32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  int32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n  float (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n  double (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n  numStringValues (tag) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n      var numMatching = fixedString.match(/\\\\/g);\n\n      if (numMatching === null) {\n        return 1;\n      }\n\n      return numMatching.length + 1;\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n  string (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n        // trim trailing spaces\n\n        return values[index].trim();\n      }\n      // trim trailing spaces\n      return fixedString.trim();\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n  text (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n\n\n        return values[index].replace(/ +$/, '');\n      }\n\n      return fixedString.replace(/ +$/, '');\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n  floatString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseFloat(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n  intString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseInt(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses an element tag according to the 'AT' VR definition (VR=AT).\n     * @param {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {String} A string representation of a data element tag or undefined if the field is not present or data is not long enough.\n     */\n  attributeTag (tag) {\n    const element = this.elements[tag];\n\n    if (element && element.length === 4) {\n      const parser = getByteArrayParser(element, this.byteArrayParser).readUint16;\n      const bytes = this.byteArray;\n      const offset = element.dataOffset;\n\n      return `x${(`00000000${(parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)}`).substr(-8)}`;\n    }\n\n    return undefined;\n  }\n}\n","/**\n *\n * Internal helper function to create a shared copy of a byteArray\n *\n */\n\n/**\n * Creates a view of the underlying byteArray.  The view is of the same type as the byteArray (e.g.\n * Uint8Array or Buffer) and shares the same underlying memory (changing one changes the other)\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param byteOffset offset into the underlying byteArray to create the view of\n * @param length number of bytes in the view\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function sharedCopy (byteArray, byteOffset, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return byteArray.slice(byteOffset, byteOffset + length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(byteArray.buffer, byteArray.byteOffset + byteOffset, length);\n  }\n  throw 'dicomParser.from: unknown type for byteArray';\n}\n","import sharedCopy from './sharedCopy.js';\nimport { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\n\n/**\n * Constructor for ByteStream objects.\n * @param byteArrayParser a parser for parsing the byte array\n * @param byteArray a Uint8Array containing the byte stream\n * @param position (optional) the position to start reading from.  0 if not specified\n * @constructor\n * @throws will throw an error if the byteArrayParser parameter is not present\n * @throws will throw an error if the byteArray parameter is not present or invalid\n * @throws will throw an error if the position parameter is not inside the byte array\n */\nexport default class ByteStream {\n  constructor (byteArrayParser, byteArray, position) {\n    if (byteArrayParser === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArrayParser\\'';\n    }\n    if (byteArray === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArray\\'';\n    }\n    if ((byteArray instanceof Uint8Array) === false &&\n          (byteArray instanceof Buffer) === false) {\n      throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer';\n    }\n    if (position < 0) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be less than 0';\n    }\n    if (position >= byteArray.length) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be greater than or equal to \\'byteArray\\' length';\n    }\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.position = position ? position : 0;\n    this.warnings = []; // array of string warnings encountered while parsing\n  }\n\n  /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n  seek (offset) {\n    if (this.position + offset < 0) {\n      throw 'dicomParser.ByteStream.prototype.seek: cannot seek to position < 0';\n    }\n    this.position += offset;\n  }\n\n  /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n  readByteStream (numBytes) {\n    if (this.position + numBytes > this.byteArray.length) {\n      throw 'dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread';\n    }\n    var byteArrayView = sharedCopy(this.byteArray, this.position, numBytes);\n\n    this.position += numBytes;\n\n    return new ByteStream(this.byteArrayParser, byteArrayView);\n  }\n\n  /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n  readUint16 () {\n    var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n\n    this.position += 2;\n\n    return result;\n  }\n\n  /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n  readUint32 () {\n    var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n\n    this.position += 4;\n\n    return result;\n  }\n\n  /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n  readFixedString (length) {\n    var result = readFixedString(this.byteArray, this.position, length);\n\n    this.position += length;\n\n    return result;\n  }\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads the tag and length of a sequence item and returns them as an object with the following properties\n *  tag : string for the tag of this element in the format xggggeeee\n *  length: the number of bytes in this item or 4294967295 if undefined\n *  dataOffset: the offset into the byteStream of the data for this item\n * @param byteStream the byte\n * @returns {{tag: string, length: integer, dataOffset: integer}}\n */\nexport default function readSequenceItem (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItem: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.tag !== 'xfffee000') {\n    throw `dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset ${byteStream.position}`;\n  }\n\n  return element;\n}\n","/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\n/**\n * Reads a string of 8-bit characters from an array of bytes and advances\n * the position by length bytes.  A null terminator will end the string\n * but will not effect advancement of the position.  Trailing and leading\n * spaces are preserved (not trimmed)\n * @param byteArray the byteArray to read from\n * @param position the position in the byte array to read from\n * @param length the maximum number of bytes to parse\n * @returns {string} the parsed string\n * @throws error if buffer overread would occur\n * @access private\n */\nexport function readFixedString (byteArray, position, length) {\n  if (length < 0) {\n    throw 'dicomParser.readFixedString - length cannot be less than 0';\n  }\n\n  if (position + length > byteArray.length) {\n    throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n  }\n\n  var result = '';\n  var byte;\n\n  for (var i = 0; i < length; i++) {\n    byte = byteArray[position + i];\n    if (byte === 0) {\n      position += length;\n\n      return result;\n    }\n    result += String.fromCharCode(byte);\n  }\n\n  return result;\n}\n","import findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readTag from './readTag.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst getDataLengthSizeInBytesForVR = (vr) => {\n  if (vr === 'OB' ||\n      vr === 'OW' ||\n      vr === 'SQ' ||\n      vr === 'OF' ||\n      vr === 'UT' ||\n      vr === 'UN') {\n    return 4;\n  }\n\n  return 2;\n};\n\nexport default function readDicomElementExplicit (byteStream, warnings, untilTag) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    vr: byteStream.readFixedString(2)\n    // length set below based on VR\n    // dataOffset set below based on VR and size of length\n  };\n\n  const dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n\n  if (dataLengthSizeBytes === 2) {\n    element.length = byteStream.readUint16();\n    element.dataOffset = byteStream.position;\n  } else {\n    byteStream.seek(2);\n    element.length = byteStream.readUint32();\n    element.dataOffset = byteStream.position;\n  }\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // if VR is SQ, parse the sequence items\n  if (element.vr === 'SQ') {\n    readSequenceItemsExplicit(byteStream, element, warnings);\n\n    return element;\n  }\n\n  if (element.length === 4294967295) {\n    if (element.tag === 'x7fe00010') {\n      findEndOfEncapsulatedElement(byteStream, element, warnings);\n\n      return element;\n    } else if (element.vr === 'UN') {\n      findAndSetUNElementLength(byteStream, element);\n\n      return element;\n    }\n\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  byteStream.seek(element.length);\n\n  return element;\n}\n","import readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\n\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\n/**\n * reads an explicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetExplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetExplicit: invalid value for parameter \\'maxP osition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n\n  if (byteStream.position > maxPosition) {\n    throw 'dicomParser:parseDicomDataSetExplicit: buffer overrun';\n  }\n}\n\n/**\n * reads an implicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetImplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetImplicit: invalid value for parameter \\'maxPosition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementImplicit(byteStream, options.untilTag, options.vrCallback);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n}\n","import alloc from './alloc.js';\nimport ByteStream from './byteStream.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport sharedCopy from './sharedCopy.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst calculateBufferSize = (fragments, startFragment, numFragments) => {\n  let bufferSize = 0;\n\n  for (let i = startFragment; i < startFragment + numFragments; i++) {\n    bufferSize += fragments[i].length;\n  }\n\n  return bufferSize;\n};\n\n/**\n * Returns the encapsulated pixel data from the specified fragments.  Use this function when you know\n * the fragments you want to extract data from.  See\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the fragment data from\n * @param startFragmentIndex - zero based index of the first fragment to extract from\n * @param [numFragments] - the number of fragments to extract from, default is 1\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} byte array with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelDataFromFragments (dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments) {\n  // default values\n  numFragments = numFragments || 1;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // check parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'startFragmentIndex\\'';\n  }\n  if (numFragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'numFragments\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (startFragmentIndex < 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be >= 0';\n  }\n  if (startFragmentIndex >= pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be < number of fragments';\n  }\n  if (numFragments < 1) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'numFragments\\' must be > 0';\n  }\n  if (startFragmentIndex + numFragments > pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragment\\' + \\'numFragments\\' < number of fragments';\n  }\n\n  // create byte stream on the data for this pixel data element\n  const byteStream = new ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n\n  // seek past the basic offset table (no need to parse it again since we already have)\n  const basicOffsetTable = readSequenceItem(byteStream);\n\n  if (basicOffsetTable.tag !== 'xfffee000') {\n    throw 'dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000';\n  }\n\n  byteStream.seek(basicOffsetTable.length);\n\n  const fragmentZeroPosition = byteStream.position;\n\n  // tag + length\n  const fragmentHeaderSize = 8;\n\n  // if there is only one fragment, return a view on this array to avoid copying\n  if (numFragments === 1) {\n    return sharedCopy(byteStream.byteArray, fragmentZeroPosition + fragments[startFragmentIndex].offset + fragmentHeaderSize, fragments[startFragmentIndex].length);\n  }\n\n  // more than one fragment, combine all of the fragments into one buffer\n  const bufferSize = calculateBufferSize(fragments, startFragmentIndex, numFragments);\n  const pixelData = alloc(byteStream.byteArray, bufferSize);\n  let pixelDataIndex = 0;\n\n  for (let i = startFragmentIndex; i < startFragmentIndex + numFragments; i++) {\n    let fragmentOffset = fragmentZeroPosition + fragments[i].offset + fragmentHeaderSize;\n\n    for (let j = 0; j < fragments[i].length; j++) {\n      pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n    }\n  }\n\n  return pixelData;\n}\n","/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nexport default {\n\n  /**\n   *\n   * Parses an unsigned int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return byteArray[position] + (byteArray[position + 1] * 256);\n  },\n\n  /**\n   *\n   * Parses a signed int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed signed int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n\n    let int16 = byteArray[position] + (byteArray[position + 1] << 8);\n\n    // fix sign\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n\n  /**\n   * Parses an unsigned int 32 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] * 256) +\n           (byteArray[position + 2] * 256 * 256) +\n           (byteArray[position + 3] * 256 * 256 * 256));\n  },\n\n  /**\n * Parses a signed int 32 from a little-endian byte array\n *\n * @param byteArray the byte array to read from\n * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] << 8) +\n           (byteArray[position + 2] << 16) +\n           (byteArray[position + 3] << 24));\n  },\n\n  /**\n   * Parses 32-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 32-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n\n    const floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  },\n\n  /**\n   * Parses 64-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 64-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n    byteArrayForParsingFloat[4] = byteArray[position + 4];\n    byteArrayForParsingFloat[5] = byteArray[position + 5];\n    byteArrayForParsingFloat[6] = byteArray[position + 6];\n    byteArrayForParsingFloat[7] = byteArray[position + 7];\n\n    const floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  }\n};\n","/**\n * Creates a new byteArray of the same type (Uint8Array or Buffer) of the specified length.\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param length number of bytes of the Byte Array\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function alloc (byteArray, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return Buffer.alloc(length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(length);\n  }\n  throw 'dicomParser.alloc: unknown type for byteArray';\n}\n","import findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst isSequence = (element, byteStream, vrCallback) => {\n  // if a data dictionary callback was provided, use that to verify that the element is a sequence.\n  if (typeof vrCallback !== 'undefined') {\n    return (vrCallback(element.tag) === 'SQ');\n  }\n\n  if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    // Item start tag (fffe,e000) or sequence delimiter (i.e. end of sequence) tag (0fffe,e0dd)\n    // These are the tags that could potentially be found directly after a sequence start tag (the delimiter\n    // is found in the case of an empty sequence). This is not 100% safe because a non-sequence item\n    // could have data that has these bytes, but this is how to do it without a data dictionary.\n    return (nextTag === 'xfffee000') || (nextTag === 'xfffee0dd');\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR');\n\n  return false;\n};\n\nexport default function readDicomElementImplicit (byteStream, untilTag, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  if (isSequence(element, byteStream, vrCallback)) {\n    // parse the sequence\n    readSequenceItemsImplicit(byteStream, element);\n\n    return element;\n  }\n\n  // if element is not a sequence and has undefined length, we have to\n  // scan the data for a magic number to figure out when it ends.\n  if (element.hadUndefinedLength) {\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  // non sequence element with known length, skip over the data part\n  byteStream.seek(element.length);\n\n  return element;\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic numbers for the item delimitation item\n * and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findItemDelimitationItemAndSetElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const itemDelimitationItemLength = 8; // group, element, length\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe00d) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32(); // the length\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","const stringVrs = {\n  AE: true,\n  AS: true,\n  AT: false,\n  CS: true,\n  DA: true,\n  DS: true,\n  DT: true,\n  FL: false,\n  FD: false,\n  IS: true,\n  LO: true,\n  LT: true,\n  OB: false,\n  OD: false,\n  OF: false,\n  OW: false,\n  PN: true,\n  SH: true,\n  SL: false,\n  SQ: false,\n  SS: false,\n  ST: true,\n  TM: true,\n  UI: true,\n  UL: false,\n  UN: undefined, // dunno\n  UR: true,\n  US: false,\n  UT: true\n};\n\n/**\n * Tests to see if vr is a string or not.\n * @param vr\n * @returns true if string, false it not string, undefined if unknown vr or UN type\n */\nconst isStringVr = (vr) => stringVrs[vr];\n\n/**\n * Tests to see if a given tag in the format xggggeeee is a private tag or not\n * @param tag\n * @returns {boolean}\n */\nconst isPrivateTag = (tag) => {\n  const lastGroupDigit = parseInt(tag[4], 10);\n  const groupIsOdd = (lastGroupDigit % 2) === 1;\n\n\n  return groupIsOdd;\n};\n\n/**\n * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n * @param personName a string in the PN VR format\n * @param index\n * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n */\nconst parsePN = (personName) => {\n  if (personName === undefined) {\n    return undefined;\n  }\n  const stringValues = personName.split('^');\n\n\n  return {\n    familyName: stringValues[0],\n    givenName: stringValues[1],\n    middleName: stringValues[2],\n    prefix: stringValues[3],\n    suffix: stringValues[4]\n  };\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN\n};\n","import readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst findFragmentIndexWithOffset = (fragments, offset) => {\n  for (let i = 0; i < fragments.length; i++) {\n    if (fragments[i].offset === offset) {\n      return i;\n    }\n  }\n};\n\nconst calculateNumberOfFragmentsForFrame = (frameIndex, basicOffsetTable, fragments, startFragmentIndex) => {\n  // special case for last frame\n  if (frameIndex === basicOffsetTable.length - 1) {\n    return fragments.length - startFragmentIndex;\n  }\n\n  // iterate through each fragment looking for the one matching the offset for the next frame\n  const nextFrameOffset = basicOffsetTable[frameIndex + 1];\n\n  for (let i = startFragmentIndex + 1; i < fragments.length; i++) {\n    if (fragments[i].offset === nextFrameOffset) {\n      return i - startFragmentIndex;\n    }\n  }\n\n  throw 'dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table';\n};\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element that has a non\n * empty basic offset table.  Note that this function will fail if the basic offset table is empty - in that\n * case you need to determine which fragments map to which frames and read them using\n * readEncapsulatedPixelDataFromFragments().  Also see the function createJEPGBasicOffsetTable() to see\n * how a basic offset table can be created for JPEG images\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frameIndex - the zero based frame index\n * @param [basicOffsetTable] - optional array of starting offsets for frames\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedImageFrame (dataSet, pixelDataElement, frameIndex, basicOffsetTable, fragments) {\n  // default parameters\n  basicOffsetTable = basicOffsetTable || pixelDataElement.basicOffsetTable;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (frameIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'frameIndex\\'';\n  }\n  if (basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' does not have basicOffsetTable';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have undefined length';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have fragments';\n  }\n  if (basicOffsetTable.length === 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries';\n  }\n  if (frameIndex < 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be >= 0';\n  }\n  if (frameIndex >= basicOffsetTable.length) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be < basicOffsetTable.length';\n  }\n\n  // find starting fragment based on the offset for the frame in the basic offset table\n  const offset = basicOffsetTable[frameIndex];\n  const startFragmentIndex = findFragmentIndexWithOffset(fragments, offset);\n\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry';\n  }\n\n  // calculate the number of fragments for this frame\n  const numFragments = calculateNumberOfFragmentsForFrame(frameIndex, basicOffsetTable, fragments, startFragmentIndex);\n\n  // now extract the frame from the fragments\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments);\n}\n","import ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n * argument is supplied and it contains the untilTag property, parsing will stop once that\n * tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n *         elements successfully parsed before the error.\n */\n\nexport default function readPart10Header (byteArray, options) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.readPart10Header: missing required parameter \\'byteArray\\'';\n  }\n\n  const littleEndianByteStream = new ByteStream(littleEndianByteArrayParser, byteArray);\n\n  function readPrefix () {\n    littleEndianByteStream.seek(128);\n    const prefix = littleEndianByteStream.readFixedString(4);\n\n    if (prefix !== 'DICM') {\n      throw 'dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file.';\n    }\n  }\n\n  // main function here\n  function readTheHeader () {\n    // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n    // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n    readPrefix();\n\n    const warnings = [];\n    const elements = {};\n\n    while (littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n      const position = littleEndianByteStream.position;\n      const element = readDicomElementExplicit(littleEndianByteStream, warnings);\n\n      if (element.tag > 'x0002ffff') {\n        littleEndianByteStream.position = position;\n        break;\n      }\n      // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n      // and this parser will be needed later if the meta header values are to be read.\n      element.parser = littleEndianByteArrayParser;\n      elements[element.tag] = element;\n    }\n\n    const metaHeaderDataSet = new DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n\n    metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n    metaHeaderDataSet.position = littleEndianByteStream.position;\n\n    return metaHeaderDataSet;\n  }\n\n  // This is where we actually start parsing\n  return readTheHeader();\n}\n","/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\nexport default {\n\n  /**\n     *\n     * Parses an unsigned int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] << 8) + byteArray[position + 1];\n  },\n\n  /**\n     *\n     * Parses a signed int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n    var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n    // fix sign\n\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n  /**\n     * Parses an unsigned int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                          byteArray[position + 1]) +\n                                          byteArray[position + 2]) +\n                                          byteArray[position + 3]);\n\n    return uint32;\n  },\n\n  /**\n     * Parses a signed int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    var int32 = ((byteArray[position] << 24) +\n                     (byteArray[position + 1] << 16) +\n                     (byteArray[position + 2] << 8) +\n                      byteArray[position + 3]);\n\n    return int32;\n  },\n\n  /**\n     * Parses 32-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 32-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[3] = byteArray[position];\n    byteArrayForParsingFloat[2] = byteArray[position + 1];\n    byteArrayForParsingFloat[1] = byteArray[position + 2];\n    byteArrayForParsingFloat[0] = byteArray[position + 3];\n    var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  },\n\n  /**\n     * Parses 64-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 64-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[7] = byteArray[position];\n    byteArrayForParsingFloat[6] = byteArray[position + 1];\n    byteArrayForParsingFloat[5] = byteArray[position + 2];\n    byteArrayForParsingFloat[4] = byteArray[position + 3];\n    byteArrayForParsingFloat[3] = byteArray[position + 4];\n    byteArrayForParsingFloat[2] = byteArray[position + 5];\n    byteArrayForParsingFloat[1] = byteArray[position + 6];\n    byteArrayForParsingFloat[0] = byteArray[position + 7];\n    var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  }\n};\n","import DataSet from './dataSet.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetImplicitUndefinedLength (byteStream, vrCallback) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementImplicit(byteStream, undefined, vrCallback);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemImplicit (byteStream, vrCallback) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream, vrCallback);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length, { vrCallback });\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthImplicit (byteStream, element, vrCallback) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence delimiter in sequence of undefined length');\n  element.length = byteStream.byteArray.length - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthImplicit (byteStream, element, vrCallback) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n}\n\n/**\n * Reads sequence items for an element in an implicit little endian byte stream\n * @param byteStream the implicit little endian byte stream\n * @param element the element to read the sequence items for\n * @param vrCallback an optional method that returns a VR string given a tag\n */\nexport default function readSequenceItemsImplicit (byteStream, element, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthImplicit(byteStream, element, vrCallback);\n  } else {\n    readSQElementKnownLengthImplicit(byteStream, element, vrCallback);\n  }\n}\n","import DataSet from './dataSet.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetExplicitUndefinedLength (byteStream, warnings) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementExplicit(byteStream, warnings);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  warnings.push('eof encountered before finding item delimiter tag while reading sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemExplicit (byteStream, warnings) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthExplicit (byteStream, element, warnings) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n\n  warnings.push('eof encountered before finding sequence delimitation tag while reading sequence of undefined length');\n  element.length = byteStream.position - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthExplicit (byteStream, element, warnings) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n}\n\nexport default function readSequenceItemsExplicit (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthExplicit(byteStream, element, warnings);\n  } else {\n    readSQElementKnownLengthExplicit(byteStream, element, warnings);\n  }\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic number for the Sequence Delimitation\n * Item item and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findAndSetUNElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findAndSetUNElementLength: missing required parameter \\'byteStream\\'';\n  }\n\n  // group, element, length\n  const itemDelimitationItemLength = 8;\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe0dd) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32();\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end\n  // of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads an encapsulated pixel data element and adds an array of fragments to the element\n * containing the offset and length of each fragment and any offsets from the basic offset\n * table\n * @param byteStream\n * @param element\n */\nexport default function findEndOfEncapsulatedElement (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'element\\'';\n  }\n\n  element.encapsulatedPixelData = true;\n  element.basicOffsetTable = [];\n  element.fragments = [];\n\n  const basicOffsetTableItemTag = readTag(byteStream);\n\n  if (basicOffsetTableItemTag !== 'xfffee000') {\n    throw 'dicomParser.findEndOfEncapsulatedElement: basic offset table not found';\n  }\n\n  const basicOffsetTableItemlength = byteStream.readUint32();\n  const numFragments = basicOffsetTableItemlength / 4;\n\n  for (let i = 0; i < numFragments; i++) {\n    const offset = byteStream.readUint32();\n\n    element.basicOffsetTable.push(offset);\n  }\n\n  const baseOffset = byteStream.position;\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const tag = readTag(byteStream);\n    let length = byteStream.readUint32();\n\n    if (tag === 'xfffee0dd') {\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    } else if (tag === 'xfffee000') {\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n    } else {\n      if (warnings) {\n        warnings.push(`unexpected tag ${tag} while searching for end of pixel data element with undefined length`);\n      }\n\n      if (length > byteStream.byteArray.length - byteStream.position) {\n        // fix length\n        length = byteStream.byteArray.length - byteStream.position;\n      }\n\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    }\n\n    byteStream.seek(length);\n  }\n\n  if (warnings) {\n    warnings.push(`pixel data element ${element.tag} missing sequence delimiter tag xfffee0dd`);\n  }\n}\n","import * as util from './util.js';\n\n/**\n * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n * Throws an error if an implicit element is supplied\n * @param dataSet\n * @param element\n * @returns {*}\n */\nexport default function explicitElementToString (dataSet, element) {\n  if (dataSet === undefined || element === undefined) {\n    throw 'dicomParser.explicitElementToString: missing required parameters';\n  }\n  if (element.vr === undefined) {\n    throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n  }\n  var vr = element.vr;\n  var tag = element.tag;\n\n  var textResult;\n\n  function multiElementToString (numItems, func) {\n    var result = '';\n\n    for (var i = 0; i < numItems; i++) {\n      if (i !== 0) {\n        result += '/';\n      }\n      result += func.call(dataSet, tag, i).toString();\n    }\n\n    return result;\n  }\n\n  if (util.isStringVr(vr) === true) {\n    textResult = dataSet.string(tag);\n  } else if (vr === 'AT') {\n    var num = dataSet.uint32(tag);\n\n    if (num === undefined) {\n      return undefined;\n    }\n    if (num < 0) {\n      num = 0xFFFFFFFF + num + 1;\n    }\n\n    return `x${num.toString(16).toUpperCase()}`;\n  } else if (vr === 'US') {\n    textResult = multiElementToString(element.length / 2, dataSet.uint16);\n  } else if (vr === 'SS') {\n    textResult = multiElementToString(element.length / 2, dataSet.int16);\n  } else if (vr === 'UL') {\n    textResult = multiElementToString(element.length / 4, dataSet.uint32);\n  } else if (vr === 'SL') {\n    textResult = multiElementToString(element.length / 4, dataSet.int32);\n  } else if (vr === 'FD') {\n    textResult = multiElementToString(element.length / 8, dataSet.double);\n  } else if (vr === 'FL') {\n    textResult = multiElementToString(element.length / 4, dataSet.float);\n  }\n\n  return textResult;\n}\n","import readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nlet deprecatedNoticeLogged = false;\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element.  If no basic offset\n * table is present, it assumes that all fragments are for one frame.  Note that this assumption/logic is not\n * valid for multi-frame instances so this function has been deprecated and will eventually be removed.  Code\n * should be updated to use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n *\n * @deprecated since version 1.6 - use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frame - the zero based frame index\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelData (dataSet, pixelDataElement, frame) {\n  if (!deprecatedNoticeLogged) {\n    deprecatedNoticeLogged = true;\n\n    if (console && console.log) {\n      console.log('WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated');\n    }\n  }\n\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'element\\'';\n  }\n  if (frame === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'frame\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (frame < 0) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'frame\\' must be >= 0';\n  }\n\n  // If the basic offset table is not empty, we can extract the frame\n  if (pixelDataElement.basicOffsetTable.length !== 0) {\n    return readEncapsulatedImageFrame(dataSet, pixelDataElement, frame);\n  }\n\n  // No basic offset table, assume all fragments are for one frame - NOTE that this is NOT a valid\n  // assumption but is the original behavior so we are keeping it for now\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, 0, pixelDataElement.fragments.length);\n}\n","module.exports = require(\"zlib\");","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","import alloc from './alloc.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readPart10Header from './readPart10Header.js';\nimport sharedCopy from './sharedCopy.js';\nimport * as byteArrayParser from './byteArrayParser.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.\n * If the options argument is supplied and it contains the untilTag property, parsing\n * will stop once that tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a\n *         property dataSet with the elements successfully parsed before the error.\n */\n\nexport default function parseDicom (byteArray, options) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.parseDicom: missing required parameter \\'byteArray\\'';\n  }\n\n  function readTransferSyntax (metaHeaderDataSet) {\n    if (metaHeaderDataSet.elements.x00020010 === undefined) {\n      throw 'dicomParser.parseDicom: missing required meta header attribute 0002,0010';\n    }\n\n    const transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n\n    return byteArrayParser.readFixedString(byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n  }\n\n  function isExplicit (transferSyntax) {\n    // implicit little endian\n    if (transferSyntax === '1.2.840.10008.1.2') {\n      return false;\n    }\n\n    // all other transfer syntaxes should be explicit\n    return true;\n  }\n\n  function getDataSetByteStream (transferSyntax, position) {\n    if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n      // if an infalter callback is registered, use it\n      if (options && options.inflater) {\n        const fullByteArrayCallback = options.inflater(byteArray, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayCallback, 0);\n      }\n      // if running on node, use the zlib library to inflate\n      // http://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js\n      else if (typeof module !== 'undefined' && this.module !== module) {\n        // inflate it\n        const zlib = require('zlib');\n        const deflatedBuffer = sharedCopy(byteArray, position, byteArray.length - position);\n        const inflatedBuffer = zlib.inflateRawSync(deflatedBuffer);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArrayBuffer = alloc(byteArray, inflatedBuffer.length + position);\n\n        byteArray.copy(fullByteArrayBuffer, 0, 0, position);\n        inflatedBuffer.copy(fullByteArrayBuffer, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayBuffer, 0);\n      }\n      // if pako is defined - use it.  This is the web browser path\n      // https://github.com/nodeca/pako\n      else if (typeof pako !== 'undefined') {\n        // inflate it\n        const deflated = byteArray.slice(position);\n        const inflated = pako.inflateRaw(deflated);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArray = alloc(byteArray, inflated.length + position);\n\n        fullByteArray.set(byteArray.slice(0, position), 0);\n        fullByteArray.set(inflated, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArray, 0);\n      }\n\n      // throw exception since no inflater is available\n      throw 'dicomParser.parseDicom: no inflater available to handle deflate transfer syntax';\n    }\n\n    // explicit big endian\n    if (transferSyntax === '1.2.840.10008.1.2.2') {\n      return new ByteStream(bigEndianByteArrayParser, byteArray, position);\n    }\n\n    // all other transfer syntaxes are little endian; only the pixel encoding differs\n    // make a new stream so the metaheader warnings don't come along for the ride\n    return new ByteStream(littleEndianByteArrayParser, byteArray, position);\n  }\n\n  function mergeDataSets (metaHeaderDataSet, instanceDataSet) {\n    for (const propertyName in metaHeaderDataSet.elements) {\n      if (metaHeaderDataSet.elements.hasOwnProperty(propertyName)) {\n        instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n      }\n    }\n\n    if (metaHeaderDataSet.warnings !== undefined) {\n      instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n    }\n\n    return instanceDataSet;\n  }\n\n  function readDataSet (metaHeaderDataSet) {\n    const transferSyntax = readTransferSyntax(metaHeaderDataSet);\n    const explicit = isExplicit(transferSyntax);\n    const dataSetByteStream = getDataSetByteStream(transferSyntax, metaHeaderDataSet.position);\n\n    const elements = {};\n    const dataSet = new DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n\n    dataSet.warnings = dataSetByteStream.warnings;\n\n    try {\n      if (explicit) {\n        parseDicomDataSet.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      } else {\n        parseDicomDataSet.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      }\n    } catch (e) {\n      const ex = {\n        exception: e,\n        dataSet\n      };\n\n      throw ex;\n    }\n\n    return dataSet;\n  }\n\n  // main function here\n  function parseTheByteStream () {\n    const metaHeaderDataSet = readPart10Header(byteArray, options);\n    const dataSet = readDataSet(metaHeaderDataSet);\n\n    return mergeDataSets(metaHeaderDataSet, dataSet);\n  }\n\n  // This is where we actually start parsing\n  return parseTheByteStream();\n}\n","export default '1.8.0';\n","// Each JPEG image has an end of image marker 0xFFD9\nfunction isEndOfImageMarker (dataSet, position) {\n  return (dataSet.byteArray[position] === 0xFF &&\n  dataSet.byteArray[position + 1] === 0xD9);\n}\n\nfunction isFragmentEndOfImage (dataSet, pixelDataElement, fragmentIndex) {\n  var fragment = pixelDataElement.fragments[fragmentIndex];\n  // Need to check the last two bytes and the last three bytes for marker since odd length\n  // fragments are zero padded\n\n  if (isEndOfImageMarker(dataSet, fragment.position + fragment.length - 2) ||\n    isEndOfImageMarker(dataSet, fragment.position + fragment.length - 3)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction findLastImageFrameFragmentIndex (dataSet, pixelDataElement, startFragment) {\n  for (var fragmentIndex = startFragment; fragmentIndex < pixelDataElement.fragments.length; fragmentIndex++) {\n    if (isFragmentEndOfImage(dataSet, pixelDataElement, fragmentIndex)) {\n      return fragmentIndex;\n    }\n  }\n}\n\n/**\n * Creates a basic offset table by scanning fragments for JPEG start of image and end Of Image markers\n * @param {object} dataSet - the parsed dicom dataset\n * @param {object} pixelDataElement - the pixel data element\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {Array} basic offset table (array of offsets to beginning of each frame)\n */\nexport default function createJPEGBasicOffsetTable (dataSet, pixelDataElement, fragments) {\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010\\'';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (fragments && fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'fragments\\' must not be zero length';\n  }\n\n  // Default values\n  fragments = fragments || pixelDataElement.fragments;\n\n  var basicOffsetTable = [];\n\n  var startFragmentIndex = 0;\n\n  while (true) {\n    // Add the offset for the start fragment\n    basicOffsetTable.push(pixelDataElement.fragments[startFragmentIndex].offset);\n    var endFragmentIndex = findLastImageFrameFragmentIndex(dataSet, pixelDataElement, startFragmentIndex);\n\n    if (endFragmentIndex === undefined || endFragmentIndex === pixelDataElement.fragments.length - 1) {\n      return basicOffsetTable;\n    }\n    startFragmentIndex = endFragmentIndex + 1;\n  }\n}\n","import explicitElementToString from './elementToString.js';\nimport * as util from './util.js';\n\n/**\n * converts an explicit dataSet to a javascript object\n * @param dataSet\n * @param options\n */\nexport default function explicitDataSetToJS (dataSet, options) {\n  if (dataSet === undefined) {\n    throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n  }\n\n  options = options || {\n    omitPrivateAttibutes: true, // true if private elements should be omitted\n    maxElementLength: 128 // maximum element length to try and convert to string format\n  };\n\n  var result = {\n\n  };\n\n  for (var tag in dataSet.elements) {\n    var element = dataSet.elements[tag];\n\n    // skip this element if it a private element and our options specify that we should\n    if (options.omitPrivateAttibutes === true && util.isPrivateTag(tag)) {\n      continue;\n    }\n\n    if (element.items) {\n      // handle sequences\n      var sequenceItems = [];\n\n      for (var i = 0; i < element.items.length; i++) {\n        sequenceItems.push(explicitDataSetToJS(element.items[i].dataSet, options));\n      }\n      result[tag] = sequenceItems;\n    } else {\n      var asString;\n\n      asString = undefined;\n      if (element.length < options.maxElementLength) {\n        asString = explicitElementToString(dataSet, element);\n      }\n\n      if (asString !== undefined) {\n        result[tag] = asString;\n      } else {\n        result[tag] = {\n          dataOffset: element.dataOffset,\n          length: element.length\n        };\n      }\n    }\n  }\n\n  return result;\n}\n","// algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\nfunction daysInMonth (m, y) { // m is 0 indexed: 0-11\n  switch (m) {\n  case 2 :\n    return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;\n  case 9 : case 4 : case 6 : case 11 :\n    return 30;\n  default :\n    return 31;\n  }\n}\n\nfunction isValidDate (d, m, y) {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA (date, validate) {\n  if (date && date.length === 8) {\n    var yyyy = parseInt(date.substring(0, 4), 10);\n    var mm = parseInt(date.substring(4, 6), 10);\n    var dd = parseInt(date.substring(6, 8), 10);\n\n    if (validate) {\n      if (isValidDate(dd, mm, yyyy) !== true) {\n        throw `invalid DA '${date}'`;\n      }\n    }\n\n    return {\n      year: yyyy,\n      month: mm,\n      day: dd\n    };\n  }\n  if (validate) {\n    throw `invalid DA '${date}'`;\n  }\n\n  return undefined;\n}\n","/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM (time, validate) {\n  if (time.length >= 2) // must at least have HH\n  {\n    // 0123456789\n    // HHMMSS.FFFFFF\n    var hh = parseInt(time.substring(0, 2), 10);\n    var mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n    var ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n    var ffffff = time.length >= 8 ? parseInt(time.substring(7, 13), 10) : undefined;\n\n    if (validate) {\n      if ((isNaN(hh)) ||\n        (mm !== undefined && isNaN(mm)) ||\n        (ss !== undefined && isNaN(ss)) ||\n        (ffffff !== undefined && isNaN(ffffff)) ||\n        (hh < 0 || hh > 23) ||\n        (mm && (mm < 0 || mm > 59)) ||\n        (ss && (ss < 0 || ss > 59)) ||\n        (ffffff && (ffffff < 0 || ffffff > 999999))) {\n        throw `invalid TM '${time}'`;\n      }\n    }\n\n    return {\n      hours: hh,\n      minutes: mm,\n      seconds: ss,\n      fractionalSeconds: ffffff\n    };\n  }\n\n  if (validate) {\n    throw `invalid TM '${time}'`;\n  }\n\n  return undefined;\n}\n","export * from './util.js';\n\nexport { default as parseTM } from './parseTM.js';\nexport { default as parseDA } from './parseDA.js';\nexport { default as explicitElementToString } from './elementToString.js';\nexport { default as explicitDataSetToJS } from './dataSetToJS.js';\nexport { default as createJPEGBasicOffsetTable } from './createJPEGBasicOffsetTable.js';\n","export * from './util/index.js';\nexport * from './parseDicomDataSet.js';\nexport * from './byteArrayParser.js';\n\nexport { default as alloc } from './alloc.js';\nexport { default as version } from './version.js';\nexport { default as bigEndianByteArrayParser } from './bigEndianByteArrayParser.js';\nexport { default as ByteStream } from './byteStream.js';\nexport { default as sharedCopy } from './sharedCopy.js';\nexport { default as DataSet } from './dataSet.js';\nexport { default as findAndSetUNElementLength } from './findAndSetUNElementLength.js';\nexport { default as findEndOfEncapsulatedElement } from './findEndOfEncapsulatedPixelData.js';\nexport { default as findItemDelimitationItemAndSetElementLength } from './findItemDelimitationItem.js';\nexport { default as littleEndianByteArrayParser } from './littleEndianByteArrayParser.js';\nexport { default as parseDicom } from './parseDicom.js';\nexport { default as readDicomElementExplicit } from './readDicomElementExplicit.js';\nexport { default as readDicomElementImplicit } from './readDicomElementImplicit.js';\nexport { default as readEncapsulatedImageFrame } from './readEncapsulatedImageFrame.js';\nexport { default as readEncapsulatedPixelData } from './readEncapsulatedPixelData.js';\nexport { default as readEncapsulatedPixelDataFromFragments } from './readEncapsulatedPixelDataFromFragments.js';\nexport { default as readPart10Header } from './readPart10Header.js';\nexport { default as readSequenceItemsExplicit } from './readSequenceElementExplicit.js';\nexport { default as readSequenceItemsImplicit } from './readSequenceElementImplicit.js';\nexport { default as readSequenceItem } from './readSequenceItem.js';\nexport { default as readTag } from './readTag.js';\n"],"sourceRoot":""}